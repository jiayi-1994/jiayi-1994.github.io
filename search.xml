<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>压测工具Sysbench、Stress、iperf或iperf3</title>
      <link href="/ya-ce/ya-ce-gong-ju-sysbench-stress-iperf-huo-iperf3.html"/>
      <url>/ya-ce/ya-ce-gong-ju-sysbench-stress-iperf-huo-iperf3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>sysbench是一款开源的、模块化的、跨平台的多线程性能测试工具，可用于CPU、内存、磁盘I/O、线程、数据库的性能测试。sysbench目前支持的数据库压测有PG和MySQL。（若想学习数据库压测，可以私聊麦老师哟，MySQL和PG均有相关课程）<br>工具的官网说明：<a href="https://launchpad.net/sysbench">https://launchpad.net/sysbench</a><br>sysbench支持以下几种测试模式：<br>1、CPU运算性能<br>2、磁盘IO性能<br>3、调度程序性能<br>4、内存分配及传输速度<br>5、POSIX线程性能–互斥基准测试<br>6、数据库性能(OLTP基准测试)</p></blockquote><h1 id="Sysbench"><a href="#Sysbench" class="headerlink" title="Sysbench"></a>Sysbench</h1><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><blockquote><p>curl -s <a href="https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh">https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh</a> | sudo bash<br>sudo yum -y install sysbench<br>sysbench –version</p></blockquote><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="sysbench通用参数选项如下"><a href="#sysbench通用参数选项如下" class="headerlink" title="sysbench通用参数选项如下"></a>sysbench通用参数选项如下</h3><blockquote><p>–threads: 线程数，若设置为2，则sysbench会启动2个线程，同时分别进行素数的计算，默认值为1。<br>–time: 运行时长，单位秒。若设置为5，则sysbench会在5秒内循环进行素数计算，每完成一轮就是一个event，默认值为10。<br>–events: event上限次数，若设置为100，则表示当完成100次event后，即使时间富余也停止运行。默认值为0，则表示不限event次数。<br>–forced-shutdown=STRING：超时强制中断，默认为off。     –thread-stack-size=SIZE：线程栈大小，默认64K<br>–thread-init-timeout=N：线程初始化等待时间，默认为30秒<br>–rate=N：平均事务率，0表示不限制，默认为0。<br>–report-interval=N：测试进度报告输出的时间间隔，0表示关闭，默认为0。<br>–report-checkpoints=[LIST,…]：转储完全统计信息并在指定时间点复位所有计数器，参数是逗号分隔值的列表，表示从必须执行报告检查点的测试开始所经过的时间（以秒为单位）。 默认情况下，报告检查点处于关闭状态[off]。<br>–debug[=on|off]：打印调试信息，默认为off<br>–validate[=on|off]：尽可能执行验证检查，默认为off。<br>–help[=on|off]：打印help信息并退出，默认为off<br>–version[=on|off]：打印版本信息并退出，默认为off<br>–config-file=FILENAME：命令行选项文件<br>–luajit-cmd=STRING：执行LuaJIT控制命令</p></blockquote><h3 id="1-cpu压测"><a href="#1-cpu压测" class="headerlink" title="1. cpu压测"></a>1. cpu压测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sysbench <span class="token parameter variable">--test</span><span class="token operator">=</span>cpu <span class="token builtin class-name">help</span>sysbench cpu --cpu-max-prime<span class="token operator">=</span><span class="token number">20000</span> <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">8</span> <span class="token parameter variable">--time</span><span class="token operator">=</span><span class="token number">30</span> run下面的命令表示10个线程执行800次请求，每个请求执行质数相加到80000000，下面开始压测：sysbench <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">10</span> <span class="token parameter variable">--events</span><span class="token operator">=</span><span class="token number">800</span>  cpu --cpu-max-prime<span class="token operator">=</span><span class="token number">80000000</span> run指标解释：Prime numbers limit: <span class="token number">20000</span>，每个线程产生的素数上限均为2000events per second: <span class="token number">650.7</span>，所有线程每秒完成了650.74次eventtotal time: <span class="token number">10</span>.0017s，共耗时10秒total number of events: <span class="token number">6510</span>，10秒内所有线程一共完成了6510次eventmin: <span class="token number">3.03</span>，完成1次event的最少耗时3.03秒avg: <span class="token number">3.07</span>，所有event的平均耗时3.07毫秒max: <span class="token number">3.27</span>，完成1次event的最多耗时3.27毫秒95th percentile: <span class="token number">3.13</span>， <span class="token number">95</span>%次event在3.13秒毫秒内完成sum: <span class="token number">19999.91</span>，每个线程耗时10秒，2个线程叠加耗时就是20秒events <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>: <span class="token number">3255.0000</span>/44.00 // 平均每个线程完成3255次event，标准差为44execution <span class="token function">time</span> <span class="token punctuation">(</span>avg/stddev<span class="token punctuation">)</span>: <span class="token number">10.0000</span>/0.00 // 每个线程平均耗时10秒，标准差为0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-内存压测"><a href="#2-内存压测" class="headerlink" title="2. 内存压测"></a>2. 内存压测</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sysbench  <span class="token parameter variable">--test</span><span class="token operator">=</span>memory <span class="token builtin class-name">help</span>--memory-block-size<span class="token operator">=</span>SIZE：测试内存块的大小，默认为1K。--memory-total-size<span class="token operator">=</span>SIZE：数据传输的总大小，默认为100G。--memory-scope<span class="token operator">=</span>STRING：内存访问的范围，包括全局和本地范围，默认为global。--memory-hugetlb<span class="token operator">=</span><span class="token punctuation">[</span>on<span class="token operator">|</span>off<span class="token punctuation">]</span>：是否从HugeTLB池分配内存的开关，默认为off。--memory-oper<span class="token operator">=</span>STRING：内存操作的类型，包括read, write, none，默认为write--memory-access-mode<span class="token operator">=</span>STRING：内存访问模式，包括seq,rnd两种模式，默认为seq。开启12个线程，内存块大小为8K，顺序读写:sysbench memory <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">12</span> --memory-block-size<span class="token operator">=</span>8K --memory-total-size<span class="token operator">=</span>100G --memory-access-mode<span class="token operator">=</span>seq runsysbench memory <span class="token parameter variable">--threads</span><span class="token operator">=</span><span class="token number">12</span> --memory-block-size<span class="token operator">=</span>8K --memory-total-size<span class="token operator">=</span>100G --memory-access-mode<span class="token operator">=</span>rnd run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-磁盘IO性能"><a href="#3-磁盘IO性能" class="headerlink" title="3. 磁盘IO性能"></a>3. 磁盘IO性能</h3><blockquote><p>sysbench –test=fileio help<br> –file-num=N：生成测试文件的数量，默认为128。<br>–file-block-size=N：测试时所使用文件块的大小，如果想磁盘针对innodb存储引擎进行测试，可以将其设置为16384（innodb存储引擎页的大小），默认为16384。<br>–file-total-size=SIZE：创建测试文件的总大小，默认为2G大小。<br>–file-test-mode=STRING：文件测试模式，seqwr(顺序写)、seqrewr(顺序读写)、seqrd(顺序读)、rndrd(随机读)、rndwr(随机写)、rndrw(随机读写)。<br>–file-io-mode=STRING：文件操作模式，sync（同步）、async（异步）、fastmmap（快速mmap）、slowmmap（慢速mmap），默认为sync。<br>–file-async-backlog=N：对应每个线程队列的异步操作数，默认为128。<br>–file-extra-flags=STRING：打开文件时的选项，与API相关的参数。<br>–file-fsync-freq=N：执行fsync函数的频率。fsync主要是同步磁盘文件，0代表不使用fsync函数，默认值为100。<br>–file-fsync-all=[on|off]：每执行完一次写操作，就执行一次fsync。默认为off。<br>–file-fsync-end=[on|off]：测试结束时执行fsync函数，默认为on。<br>–file-fsync-mode=STRING：文件同步函数选择，和API相关的参数，由于多个操作系统对于fdatasync支持不同，因此不建议使用fdatasync，默认为fsync。<br>–file-merged-requests=N：大多情况下，合并可能的IO的请求数，默认为0。<br>–file-rw-ratio=N：测试时的读写比例，默认时为1.5，即可3：2。</p><h3 id="数据准备："><a href="#数据准备：" class="headerlink" title="数据准备："></a><strong>数据准备：</strong></h3><p>sysbench fileio –file-num=16 –file-total-size=2G prepare</p><h3 id="执行测试："><a href="#执行测试：" class="headerlink" title="执行测试："></a><strong>执行测试：</strong></h3><p>sysbench fileio –file-total-size=2G –file-test-mode=rndrd –time=180  –threads=16  –file-num=16 –file-extra-flags=direct –file-fsync-freq=0 –file-block-size=16384 run</p><h3 id="清理数据："><a href="#清理数据：" class="headerlink" title="清理数据："></a><strong>清理数据：</strong></h3><p>sysbench fileio –file-num=16 –file-total-size=2G cleanup</p></blockquote><h1 id="Stress"><a href="#Stress" class="headerlink" title="Stress"></a>Stress</h1><h2 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1. 安装"></a>1. 安装</h2><blockquote><ol><li>[# wget <a href="https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/s/stress-1.0.4-16.el7.x86_64.rpm">https://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/s/stress-1.0.4-16.el7.x86_64.rpm</a></li><li>[]# rpm -ivh stress-1.0.4-16.el7.x86_64.rpm</li></ol></blockquote><h2 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2. 使用"></a>2. 使用</h2><h3 id="1-cpu"><a href="#1-cpu" class="headerlink" title="1. cpu"></a>1. cpu</h3><blockquote><p>创建8个stress进程，持续时间600秒，模拟CPU在用户态使用率达到100%的场景。<br>stress –cpu 8 –timeout 600</p></blockquote><h3 id="2-内存"><a href="#2-内存" class="headerlink" title="2. 内存"></a>2. 内存</h3><blockquote><p>创建100个io进程，持续时间600秒，模拟CPU在内核态使用率达到100%的场景。<br> stress  –io 100 –timeout 600<br>stress –vm 5 –vm-bytes 1G –vm-hang 100 –timeout 100s </p></blockquote><h3 id="3-IO"><a href="#3-IO" class="headerlink" title="3.IO"></a>3.IO</h3><blockquote><p>创建8个stress进程和100个io进程，持续时间600秒，模拟CPU在用户态和内核态总使用率达到100%的场景。<br> stress -c 8 -i 100 –verbose –timeout 600</p></blockquote><h1 id="IfTOP"><a href="#IfTOP" class="headerlink" title="IfTOP"></a>IfTOP</h1><blockquote><p>yum install flex byacc  libpcap ncurses ncurses-devel<br>yum install gcc gcc-c++ autoconf automake<br>wget <a href="ftp://fr2.rpmfind.net/linux/dag/redhat/el5/en/i386/dag/RPMS/iftop-0.17-1.el5.rf.i386.rpm">ftp://fr2.rpmfind.net/linux/dag/redhat/el5/en/i386/dag/RPMS/iftop-0.17-1.el5.rf.i386.rpm</a><br>rpm -ivh iftop-0.17-1.el5.rf.i386.rpm</p><p>wget <a href="http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz">http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz</a><br> tar -xvzf iftop-0.17.tar.gz<br>./configure &amp;&amp; make &amp;&amp; make install  </p><p>TX：发送流量<br>RX：接收流量<br>TOTAL：总流量<br>Cumm：运行iftop到目前时间的总流量<br>peak：流量峰值<br>rates：分别表示过去 2s 10s 40s 的平均流量</p></blockquote><h1 id="iperf或iperf3"><a href="#iperf或iperf3" class="headerlink" title="iperf或iperf3"></a>iperf或iperf3</h1><blockquote><h3 id="服务端运行："><a href="#服务端运行：" class="headerlink" title="服务端运行："></a>服务端运行：</h3><p>iperf -u -s</p><h4 id="u表示以udp模式运行（不加该参数，默认是以tcp模式运行），-s表示作为服务端"><a href="#u表示以udp模式运行（不加该参数，默认是以tcp模式运行），-s表示作为服务端" class="headerlink" title="-u表示以udp模式运行（不加该参数，默认是以tcp模式运行），-s表示作为服务端"></a>-u表示以udp模式运行（不加该参数，默认是以tcp模式运行），-s表示作为服务端</h4><h3 id="客户端运行："><a href="#客户端运行：" class="headerlink" title="客户端运行："></a>客户端运行：</h3><p>iperf -u -c 192.168.30.115 -b 100M -t 60 -i 2</p><h4 id="解释：在udp模式下，以100Mbps为数据发送速率，客户端到服务器192-168-30-115上传带宽测试，测试时间为60秒"><a href="#解释：在udp模式下，以100Mbps为数据发送速率，客户端到服务器192-168-30-115上传带宽测试，测试时间为60秒" class="headerlink" title="解释：在udp模式下，以100Mbps为数据发送速率，客户端到服务器192.168.30.115上传带宽测试，测试时间为60秒"></a>解释：在udp模式下，以100Mbps为数据发送速率，客户端到服务器192.168.30.115上传带宽测试，测试时间为60秒</h4><p>iperf -c 192.168.30.115 -u -i 1 -t 10 -b 2M -P 2</p><h4 id="解释：客户端同时向服务器端发起2个连接线程，每个连接线程以2Mbps为数据发送速率，测试时间为10秒"><a href="#解释：客户端同时向服务器端发起2个连接线程，每个连接线程以2Mbps为数据发送速率，测试时间为10秒" class="headerlink" title="解释：客户端同时向服务器端发起2个连接线程，每个连接线程以2Mbps为数据发送速率，测试时间为10秒"></a>解释：客户端同时向服务器端发起2个连接线程，每个连接线程以2Mbps为数据发送速率，测试时间为10秒</h4><p>iperf -u -c 192.168.30.115 -b 1000M -d -t 60 -i 1</p><h4 id="解释：以1000M为数据发送速率，进行上下行带宽测试，测试时间60秒，每秒显示一次结果"><a href="#解释：以1000M为数据发送速率，进行上下行带宽测试，测试时间60秒，每秒显示一次结果" class="headerlink" title="解释：以1000M为数据发送速率，进行上下行带宽测试，测试时间60秒，每秒显示一次结果"></a>解释：以1000M为数据发送速率，进行上下行带宽测试，测试时间60秒，每秒显示一次结果</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【gRPC SSL】自签CA、服务端和客户端双向认证</title>
      <link href="/grpc/grpc-ssl-zi-qian-ca-fu-wu-duan-he-ke-hu-duan-shuang-xiang-ren-zheng.html"/>
      <url>/grpc/grpc-ssl-zi-qian-ca-fu-wu-duan-he-ke-hu-duan-shuang-xiang-ren-zheng.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了自签CA、服务端和客户端双向认证,主要包括自签CA、GolangGrpc服务端和客户端双向认证的相关内容,需要的朋友可以参考下</p></blockquote><h3 id="参考地址：https-blog-csdn-net-dl962454-article-details-124350199"><a href="#参考地址：https-blog-csdn-net-dl962454-article-details-124350199" class="headerlink" title="参考地址：https://blog.csdn.net/dl962454/article/details/124350199"></a>参考地址：<a href="https://blog.csdn.net/dl962454/article/details/124350199">https://blog.csdn.net/dl962454/article/details/124350199</a></h3><h2 id="一、双向认证"><a href="#一、双向认证" class="headerlink" title="一、双向认证"></a>一、双向认证</h2><h3 id="1-1-CA根证书生成"><a href="#1-1-CA根证书生成" class="headerlink" title="1.1 CA根证书生成"></a>1.1 CA根证书生成</h3><p>在openssl的bin目录下新建一个配置文件<strong>ca.conf</strong>，文件内容如下：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span> <span class="token table class-name">req</span> <span class="token punctuation">]</span><span class="token key property">default_bits</span>       <span class="token punctuation">=</span> <span class="token number">2048</span><span class="token key property">distinguished_name</span> <span class="token punctuation">=</span> req_distinguished_name<span class="token punctuation">[</span> <span class="token table class-name">req_distinguished_name</span> <span class="token punctuation">]</span><span class="token key property">countryName</span>                 <span class="token punctuation">=</span> Country Name (<span class="token number">2</span> letter code)<span class="token key property">countryName_default</span>         <span class="token punctuation">=</span> CN<span class="token key property">stateOrProvinceName</span>         <span class="token punctuation">=</span> State or Province Name (full name)<span class="token key property">stateOrProvinceName_default</span> <span class="token punctuation">=</span> SiChuan<span class="token key property">localityName</span>                <span class="token punctuation">=</span> Locality Name (eg<span class="token punctuation">,</span> city)<span class="token key property">localityName_default</span>        <span class="token punctuation">=</span> Chengdu<span class="token key property">organizationName</span>            <span class="token punctuation">=</span> Organization Name (eg<span class="token punctuation">,</span> company)<span class="token key property">organizationName_default</span>    <span class="token punctuation">=</span> Step<span class="token key property">commonName</span>                  <span class="token punctuation">=</span> CommonName (e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> server FQDN or YOUR name)<span class="token key property">commonName_max</span>              <span class="token punctuation">=</span> <span class="token number">64</span><span class="token key property">commonName_default</span>          <span class="token punctuation">=</span> tonghua<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依次执行下面的命令，执行过程中遇到的填写国家之类的直接Enter跳过，选择配置文件中默认的，从而生成**CA私钥(ca.key)<strong>、*<br>*签名请求(ca.csr)</strong> 和 <strong>签名证书（ca.crt）</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl genrsa <span class="token parameter variable">-out</span> ca.key <span class="token number">2048</span>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-out</span> ca.csr <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-config</span> ca.confopenssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-in</span> ca.csr signkey ca.key out ca.crt //这地方的输出可以改写成ca.pem,改写后后面命令中也要同步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-签发服务端证书"><a href="#1-2-签发服务端证书" class="headerlink" title="1.2 签发服务端证书"></a>1.2 签发服务端证书</h3><p>接下来创建服务端配置文件server.conf，文件内容如下:</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span> <span class="token table class-name">req</span> <span class="token punctuation">]</span><span class="token key property">default_bits</span>       <span class="token punctuation">=</span> <span class="token number">2048</span><span class="token key property">distinguished_name</span> <span class="token punctuation">=</span> req_distinguished_name<span class="token punctuation">[</span> <span class="token table class-name">req_distinguished_name</span> <span class="token punctuation">]</span><span class="token key property">countryName</span>                 <span class="token punctuation">=</span> Country Name (<span class="token number">2</span> letter code)<span class="token key property">countryName_default</span>         <span class="token punctuation">=</span> CN<span class="token key property">stateOrProvinceName</span>         <span class="token punctuation">=</span> State or Province Name (full name)<span class="token key property">stateOrProvinceName_default</span> <span class="token punctuation">=</span> SiChuan<span class="token key property">localityName</span>                <span class="token punctuation">=</span> Locality Name (eg<span class="token punctuation">,</span> city)<span class="token key property">localityName_default</span>        <span class="token punctuation">=</span> Chengdu<span class="token key property">organizationName</span>            <span class="token punctuation">=</span> Organization Name (eg<span class="token punctuation">,</span> company)<span class="token key property">organizationName_default</span>    <span class="token punctuation">=</span> Step<span class="token key property">commonName</span>                  <span class="token punctuation">=</span> CommonName (e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> server FQDN or YOUR name)<span class="token key property">commonName_max</span>              <span class="token punctuation">=</span> <span class="token number">64</span><span class="token key property">commonName_default</span>          <span class="token punctuation">=</span> tonghua<span class="token punctuation">[</span> <span class="token table class-name">req_ext</span> <span class="token punctuation">]</span><span class="token comment"># 添加subjectAltName </span><span class="token key property">subjectAltName</span> <span class="token punctuation">=</span> @alt_names<span class="token comment"># 文件末尾添加. www.p-pp.cn代表允许的ServerName,自己随便写</span><span class="token punctuation">[</span><span class="token table class-name">alt_names</span><span class="token punctuation">]</span><span class="token key property">DNS.1</span>   <span class="token punctuation">=</span> www<span class="token punctuation">.</span>p-pp<span class="token punctuation">.</span>cn<span class="token key property">IP</span>      <span class="token punctuation">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，使用上面得到的CA根证书（ca.crt）签发服务端证书，依次执行下面命令生成服务端的密钥、签名请求和签名证书：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 服务端私钥openssl genrsa <span class="token parameter variable">-out</span> server.key <span class="token number">2048</span>//服务端签名请求openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-out</span> server.csr <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-config</span> server.conf//用根证书签发服务端证书server.pemopenssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-out</span> server.pem <span class="token parameter variable">-extensions</span> req_ext <span class="token parameter variable">-extfile</span> server.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-签发客户端证书"><a href="#1-3-签发客户端证书" class="headerlink" title="1.3 签发客户端证书"></a>1.3 签发客户端证书</h3><p>建立配置文件client.conf：</p><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span> <span class="token table class-name">req</span> <span class="token punctuation">]</span><span class="token key property">default_bits</span>       <span class="token punctuation">=</span> <span class="token number">2048</span><span class="token key property">distinguished_name</span> <span class="token punctuation">=</span> req_distinguished_name<span class="token punctuation">[</span> <span class="token table class-name">req_distinguished_name</span> <span class="token punctuation">]</span><span class="token key property">countryName</span>                 <span class="token punctuation">=</span> Country Name (<span class="token number">2</span> letter code)<span class="token key property">countryName_default</span>         <span class="token punctuation">=</span> CN<span class="token key property">stateOrProvinceName</span>         <span class="token punctuation">=</span> State or Province Name (full name)<span class="token key property">stateOrProvinceName_default</span> <span class="token punctuation">=</span> SiChuan<span class="token key property">localityName</span>                <span class="token punctuation">=</span> Locality Name (eg<span class="token punctuation">,</span> city)<span class="token key property">localityName_default</span>        <span class="token punctuation">=</span> Chengdu<span class="token key property">organizationName</span>            <span class="token punctuation">=</span> Organization Name (eg<span class="token punctuation">,</span> company)<span class="token key property">organizationName_default</span>    <span class="token punctuation">=</span> Step<span class="token key property">commonName</span>                  <span class="token punctuation">=</span> CommonName (e<span class="token punctuation">.</span>g<span class="token punctuation">.</span> server FQDN or YOUR name)<span class="token key property">commonName_max</span>              <span class="token punctuation">=</span> <span class="token number">64</span><span class="token key property">commonName_default</span>          <span class="token punctuation">=</span> tonghua<span class="token punctuation">[</span> <span class="token table class-name">req_ext</span> <span class="token punctuation">]</span><span class="token key property">subjectAltName</span> <span class="token punctuation">=</span> @alt_names<span class="token punctuation">[</span><span class="token table class-name">alt_names</span><span class="token punctuation">]</span><span class="token key property">DNS.1</span>   <span class="token punctuation">=</span> www<span class="token punctuation">.</span>p-pp<span class="token punctuation">.</span>cn<span class="token key property">IP</span>      <span class="token punctuation">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行下面命令生成客户端密钥、证书等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openssl ecparam <span class="token parameter variable">-genkey</span> <span class="token parameter variable">-name</span> secp384r1 <span class="token parameter variable">-out</span> client.keyopenssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-out</span> client.csr <span class="token parameter variable">-key</span> client.key <span class="token parameter variable">-config</span> client.confopenssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-in</span> client.csr <span class="token parameter variable">-out</span> client.pem <span class="token parameter variable">-extensions</span> req_ext <span class="token parameter variable">-extfile</span> client.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-4-服务端代码改写"><a href="#1-4-服务端代码改写" class="headerlink" title="1.4 服务端代码改写"></a>1.4 服务端代码改写</h3><p>服务端改写，首先拷贝ca.pem、server.key和server.pem到服务端项目中，改写代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"crypto/x509"</span><span class="token string">"google.golang.org/grpc"</span><span class="token string">"google.golang.org/grpc/credentials"</span><span class="token string">"grpcpro/services"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"net"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token comment">// Address gRPC服务地址</span>Address <span class="token operator">=</span> <span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TLS认证</span><span class="token comment">//从证书相关文件中读取和解析信息，得到证书公钥、密钥对</span>cert<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">"keys/server.pem"</span><span class="token punctuation">,</span> <span class="token string">"keys/server.key"</span><span class="token punctuation">)</span>certPool <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewCertPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//初始化一个CertPool</span>ca<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"keys/ca.pem"</span><span class="token punctuation">)</span>certPool<span class="token punctuation">.</span><span class="token function">AppendCertsFromPEM</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span> <span class="token comment">//解析传入的证书，解析成功会将其加到池子中</span>creds <span class="token operator">:=</span> credentials<span class="token punctuation">.</span><span class="token function">NewTLS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">{</span> <span class="token comment">//构建基于TLS的TransportCredentials选项</span>Certificates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tls<span class="token punctuation">.</span>Certificate<span class="token punctuation">{</span>cert<span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//服务端证书链，可以有多个</span>ClientAuth<span class="token punctuation">:</span>   tls<span class="token punctuation">.</span>RequireAndVerifyClientCert<span class="token punctuation">,</span> <span class="token comment">//要求必须验证客户端证书</span>ClientCAs<span class="token punctuation">:</span>    certPool<span class="token punctuation">,</span>                       <span class="token comment">//设置根证书的集合，校验方式使用 ClientAuth 中设定的模式</span><span class="token punctuation">}</span><span class="token punctuation">)</span>rpcServer <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span>grpc<span class="token punctuation">.</span><span class="token function">Creds</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//实例化grpc Server</span><span class="token comment">//创建带ca证书验证的服务端</span>services<span class="token punctuation">.</span><span class="token function">RegisterProdServiceServer</span><span class="token punctuation">(</span>rpcServer<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>services<span class="token punctuation">.</span>ProdService<span class="token punctuation">)</span><span class="token punctuation">)</span>listen<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> Address<span class="token punctuation">)</span> <span class="token comment">//设置传输协议和监听地址</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Listen on "</span> <span class="token operator">+</span> Address <span class="token operator">+</span> <span class="token string">" with TLS"</span><span class="token punctuation">)</span>rpcServer<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-客户端代码改写"><a href="#1-5-客户端代码改写" class="headerlink" title="1.5 客户端代码改写"></a>1.5 客户端代码改写</h3><p>客户端改写：同样要拷贝ca.pem、client.key和client.pem到客户端项目中，改写代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"crypto/tls"</span><span class="token string">"crypto/x509"</span><span class="token string">"fmt"</span><span class="token string">"google.golang.org/grpc"</span><span class="token string">"google.golang.org/grpc/credentials"</span><span class="token string">"grpcClient/services"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span><span class="token comment">// Address gRPC服务地址</span>Address <span class="token operator">=</span> <span class="token string">"127.0.0.1:8888"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TLS连接</span><span class="token comment">//从证书相关文件中读取和解析信息，得到证书公钥、密钥对</span>cert<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> tls<span class="token punctuation">.</span><span class="token function">LoadX509KeyPair</span><span class="token punctuation">(</span><span class="token string">"keys/client.pem"</span><span class="token punctuation">,</span> <span class="token string">"keys/client.key"</span><span class="token punctuation">)</span>certPool <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewCertPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ca<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"keys/ca.pem"</span><span class="token punctuation">)</span>certPool<span class="token punctuation">.</span><span class="token function">AppendCertsFromPEM</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span>creds <span class="token operator">:=</span> credentials<span class="token punctuation">.</span><span class="token function">NewTLS</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>Certificates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>tls<span class="token punctuation">.</span>Certificate<span class="token punctuation">{</span>cert<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">//客户端证书</span>ServerName<span class="token punctuation">:</span>   <span class="token string">"www.p-pp.cn"</span><span class="token punctuation">,</span>           <span class="token comment">//注意这里的参数为配置文件中所允许的ServerName，也就是其中配置的DNS...</span>RootCAs<span class="token punctuation">:</span>      certPool<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>Address<span class="token punctuation">,</span> grpc<span class="token punctuation">.</span><span class="token function">WithTransportCredentials</span><span class="token punctuation">(</span>creds<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//连接服务端</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>prodClient <span class="token operator">:=</span> services<span class="token punctuation">.</span><span class="token function">NewProdServiceClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>                                                <span class="token comment">//初始化客户端</span>prodRes<span class="token punctuation">,</span> err <span class="token operator">:=</span> prodClient<span class="token punctuation">.</span><span class="token function">GetProdStock</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>services<span class="token punctuation">.</span>ProdRequest<span class="token punctuation">{</span>ProdId<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//调用方法</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"grpcClient getProdStock is %d\n"</span><span class="token punctuation">,</span> prodRes<span class="token punctuation">.</span>ProdStock<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-双向认证成功"><a href="#1-6-双向认证成功" class="headerlink" title="1.6 双向认证成功"></a>1.6 双向认证成功</h3><p>启动两个服务之后客户端就能使用服务端的服务了。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/12993007/1672903044229-edd8c492-2f47-42eb-81d4-453d29b8a0ec.png#averageHue=%23262d33&amp;clientId=ue9231923-8cb9-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u53feb24a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=109&amp;originWidth=673&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80996&amp;status=done&amp;style=none&amp;taskId=u9b6ce115-37b0-49e1-a7d2-8fd047eb139&amp;title=" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grpc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>article title</title>
      <link href="/article-title.html"/>
      <url>/article-title.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
